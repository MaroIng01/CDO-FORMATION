import 'package:flutter/material.dart';
import '../models/service.dart';
import 'package:url_launcher/url_launcher.dart';

class ServicesPage extends StatefulWidget {
  const ServicesPage({Key? key}) : super(key: key);

  @override
  State<ServicesPage> createState() => _ServicesPageState();
}

class _ServicesPageState extends State<ServicesPage> {
  int? expandedIndex;

  final List<Service> services = [
    Service(
      id: 1,
      name: 'Formations de formateurs',
      description:
          'CDO Formation est habilit√© par l\'INRS sous le N¬∞ : 222/2011/PRAPIBC-2/11 pour dispenser la formation de formateurs PRAP IBC, et sous le N¬∞ : 1498/2012/PRAP2S-2/11 pour dispenser la formation de formateurs PRAP 2S. \n'
          'Concernant la formation de formateurs SST, nous travaillons avec notre partenaire "MFC-03410" habilit√© sous le N¬∞ : 2492/2013/SST-2/02. Ce dernier assure la formation  de nos clients',
      imagePath: 'lib/logos/reunion.jpg',
      sousServices: [],
      url: 'https://cdo-formation.fr/formations-v2.php?activeitem=1',
    ),
    Service(
      id: 2,
      name: 'Formation avec la CARSAT CVL',
      description:
          'Formations r√©alis√©es en partenariat avec la CARSAT Centre Val de Loire',
      imagePath: 'lib/logos/reunion.jpg',
      sousServices: [],
      url: 'https://cdo-formation.fr/formations-v2.php?activeitem=6',
    ),
    Service(
      id: 3,
      name: 'Animateurs et Directeurs',
      description:
          'Un sauveteur secouriste du travail (ou SST) peut sauver des vies sur le lieu de travail, notamment en cas d‚Äôaccident du travail. Il s‚Äôagit d‚Äôun membre du personnel ayant re√ßu l‚Äôinstruction n√©cessaire pour donner les premiers secours en cas d‚Äôurgence et dans l‚Äôattente de l‚Äôarriv√©e des secours sp√©cialis√©s. La pr√©sence de secouristes est obligatoire, selon l‚Äôarticle R. 4224-15 du Code du travail.',
      imagePath: 'lib/logos/reunion.jpg',
      sousServices: [],
      url: 'https://cdo-formation.fr/formations-v2.php?activeitem=2',
    ),
    Service(
      id: 4,
      name: 'CSE et CSSCT',
      description:
          'Constitu√© dans tous les √©tablissements occupant au moins 50 salari√©s, le CHSCT a pour mission de contribuer √† la protection de la sant√© et de la s√©curit√© des salari√©s ainsi qu‚Äô√† l‚Äôam√©lioration des conditions de travail. Le CHSCT dispose d‚Äôun certain nombre de moyens pour mener √† bien sa mission (information, recours √† un expert‚Ä¶) et les repr√©sentants du personnel disposent d‚Äôun cr√©dit d‚Äôheures et d‚Äôune protection contre le licenciement. Ces moyens sont renforc√©s dans les entreprises √† haut risque industriel. En l‚Äôabsence de CHSCT, ce sont les d√©l√©gu√©s du personnel qui exercent les attributions normalement d√©volues au comit√©. ',
      imagePath: 'lib/logos/reunion.jpg',
      sousServices: [],
      url: 'https://cdo-formation.fr/formations-v2.php?activeitem=4',
    ),
    Service(
      id: 5,
      name: 'Salari√©s et autres publics',
      description:
          'La formation et l‚Äôinformation sont une obligation de l‚Äôemployeur en mati√®re de pr√©vention des risques professionnels, elles concernent tous les salari√©s. Au-del√† de leur caract√®re obligatoire, ces formations s‚Äôav√®rent particuli√®rement profitables puisqu‚Äôen sensibilisant les salari√©s aux risques professionnels, elles permettent d‚Äôassurer la p√©rennit√© de l‚Äôentreprise en pr√©servant le capital humain et en am√©liorant sa comp√©titivit√©.',
      imagePath: 'lib/logos/reunion.jpg',
      sousServices: [],
      url: 'https://cdo-formation.fr/formations-v2.php?activeitem=3',
    ),
  ];

  final List<Map<String, String>> externalLinks = [
    {
      'title': 'üìò Notre catalogue de formation',
      'url': 'https://cdo-formation.fr/formations-liste-v2.php',
    },
    {
      'title': 'üìÖ Sessions inter-entreprises',
      'url': 'https://cdo-formation.fr/sessions-v2.php',
    },
  ];

  // Couleurs mises √† jour
  static const backgroundColor = Color(0xFFFDFCFB); // blanc cass√©
  static const primaryColor = Color(0xFF2C3E50); // bleu-gris profond
  static const secondaryColor = Color(0xFFECF0F3); // gris bleut√© clair
  static const textColor = Color(0xFF2E2E2E); // gris fonc√©
  static const accentColor = Color(0xFFA83A3A); // rouge bordeaux √©l√©gant

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: backgroundColor,
      body: ListView(
        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 28),
        children: [
          Text(
            'Nos Formations',
            textAlign: TextAlign.center,
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.w700,
              color: primaryColor,
              letterSpacing: 1.5,
              fontFamily: 'Poppins',
              shadows: [
                Shadow(
                  color: Colors.black12,
                  blurRadius: 6,
                  offset: Offset(0, 3),
                ),
              ],
            ),
          ),
          const SizedBox(height: 32),

          ...List.generate(services.length, (index) {
            final service = services[index];
            final isExpanded = expandedIndex == index;

            return AnimatedContainer(
              duration: const Duration(milliseconds: 400),
              curve: Curves.easeInOut,
              margin: const EdgeInsets.symmetric(vertical: 16),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(24),
                color: Colors.white,
                boxShadow: [
                  BoxShadow(
                    color: Colors.black12.withOpacity(0.06),
                    blurRadius: 20,
                    offset: const Offset(0, 8),
                  ),
                  BoxShadow(
                    color: Colors.black12.withOpacity(0.025),
                    blurRadius: 6,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(24),
                child: Material(
                  color: Colors.transparent,
                  child: InkWell(
                    onTap: () {
                      setState(() {
                        expandedIndex = isExpanded ? null : index;
                      });
                    },
                    splashColor: accentColor.withOpacity(0.15),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        ClipRRect(
                          borderRadius: const BorderRadius.vertical(
                            top: Radius.circular(24),
                          ),
                          child: Image.asset(
                            service.imagePath,
                            height: 200,
                            width: double.infinity,
                            fit: BoxFit.cover,
                            colorBlendMode: BlendMode.softLight,
                            color: Colors.black.withOpacity(0.06),
                          ),
                        ),
                        Container(
                          padding: const EdgeInsets.symmetric(
                            vertical: 22,
                            horizontal: 24,
                          ),
                          color: primaryColor,
                          child: Text(
                            service.name,
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 22,
                              fontWeight: FontWeight.w700,
                              letterSpacing: 1.1,
                              fontFamily: 'Poppins',
                            ),
                          ),
                        ),
                        AnimatedCrossFade(
                          firstChild: const SizedBox.shrink(),
                          secondChild: Padding(
                            padding: const EdgeInsets.fromLTRB(24, 22, 24, 32),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  service.description ?? '',
                                  style: TextStyle(
                                    fontSize: 17,
                                    color: textColor,
                                    height: 1.5,
                                    fontFamily: 'Poppins',
                                  ),
                                ),
                                const SizedBox(height: 26),
                                ElevatedButton.icon(
                                  onPressed: () async {
                                    final urlString = service.url ?? '';
                                    if (urlString.isNotEmpty) {
                                      final url = Uri.parse(urlString);
                                      if (await canLaunchUrl(url)) {
                                        await launchUrl(url);
                                      } else {
                                        ScaffoldMessenger.of(
                                          context,
                                        ).showSnackBar(
                                          const SnackBar(
                                            content: Text(
                                              'Impossible d\'ouvrir le lien',
                                            ),
                                          ),
                                        );
                                      }
                                    }
                                  },
                                  icon: const Icon(
                                    Icons.arrow_forward_ios,
                                    size: 18,
                                  ),
                                  label: const Text('Voir les formations'),
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: accentColor,
                                    foregroundColor: Colors.white,
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(30),
                                    ),
                                    padding: const EdgeInsets.symmetric(
                                      horizontal: 28,
                                      vertical: 14,
                                    ),
                                    elevation: 6,
                                    shadowColor: accentColor.withOpacity(0.6),
                                    textStyle: const TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.w600,
                                      fontFamily: 'Poppins',
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          crossFadeState: isExpanded
                              ? CrossFadeState.showSecond
                              : CrossFadeState.showFirst,
                          duration: const Duration(milliseconds: 350),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            );
          }),

          const SizedBox(height: 40),
          Divider(thickness: 1.4, color: Colors.grey.shade300),
          const SizedBox(height: 18),
          ...externalLinks.map((link) {
            return Card(
              color: primaryColor,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(22),
              ),
              margin: const EdgeInsets.symmetric(vertical: 12),
              elevation: 8,
              shadowColor: Colors.black38,
              child: ListTile(
                title: Text(
                  link['title']!,
                  style: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.w700,
                    fontSize: 18,
                    fontFamily: 'Poppins',
                  ),
                ),
                trailing: const Icon(Icons.open_in_new, color: Colors.white),
                onTap: () async {
                  final url = Uri.parse(link['url']!);
                  if (await canLaunchUrl(url)) {
                    await launchUrl(url);
                  } else {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('Impossible d\'ouvrir le lien'),
                      ),
                    );
                  }
                },
              ),
            );
          }).toList(),
          const SizedBox(height: 50),
        ],
      ),
    );
  }
}
