// lib/pages/services_page.dart

import 'package:flutter/material.dart';
import '../models/service.dart';
import 'package:url_launcher/url_launcher.dart';

class ServicesPage extends StatefulWidget {
  const ServicesPage({super.key});

  @override
  State<ServicesPage> createState() => _ServicesPageState();
}

class _ServicesPageState extends State<ServicesPage> {
  int? expandedIndex;

  final List<Service> services = [
    Service(
      id: 1, name: 'Formations de formateurs', 
      description: 'CDO Formation est habilitÃ© par l\'INRS sous le NÂ° : 222/2011/PRAPIBC-2/11 pour dispenser la formation de formateurs PRAP IBC, et sous le NÂ° : 1498/2012/PRAP2S-2/11 pour dispenser la formation de formateurs PRAP 2S. \nConcernant la formation de formateurs SST, nous travaillons avec notre partenaire "MFC-03410" habilitÃ© sous le NÂ° : 2492/2013/SST-2/02. Ce dernier assure la formation de nos clients', 
      imagePath: 'lib/logos/reunion.jpg', sousServices: [], url: 'https://cdo-formation.fr/formations-v2.php?activeitem=1'
    ),
    Service(
      id: 2, name: 'Formation avec la CARSAT CVL', 
      description: 'Formations rÃ©alisÃ©es en partenariat avec la CARSAT Centre Val de Loire', 
      imagePath: 'lib/logos/reunion.jpg', sousServices: [], url: 'https://cdo-formation.fr/formations-v2.php?activeitem=6'
    ),
    Service(
      id: 3, name: 'Animateurs et Directeurs', 
      description: 'Un sauveteur secouriste du travail (ou SST) peut sauver des vies sur le lieu de travail, notamment en cas dâ€™accident du travail. Il sâ€™agit dâ€™un membre du personnel ayant reÃ§u lâ€™instruction nÃ©cessaire pour donner les premiers secours en cas dâ€™urgence et dans lâ€™attente de lâ€™arrivÃ©e des secours spÃ©cialisÃ©s. La prÃ©sence de secouristes est obligatoire, selon lâ€™article R. 4224-15 du Code du travail.', 
      imagePath: 'lib/logos/reunion.jpg', sousServices: [], url: 'https://cdo-formation.fr/formations-v2.php?activeitem=2'
    ),
    Service(
      id: 4, name: 'CSE et CSSCT', 
      description: 'ConstituÃ© dans tous les Ã©tablissements occupant au moins 50 salariÃ©s, le CHSCT a pour mission de contribuer Ã  la protection de la santÃ© et de la sÃ©curitÃ© des salariÃ©s ainsi quâ€™Ã  lâ€™amÃ©lioration des conditions de travail...', 
      imagePath: 'lib/logos/reunion.jpg', sousServices: [], url: 'https://cdo-formation.fr/formations-v2.php?activeitem=4'
    ),
    Service(
      id: 5, name: 'SalariÃ©s et autres publics', 
      description: 'La formation et lâ€™information sont une obligation de lâ€™employeur en matiÃ¨re de prÃ©vention des risques professionnels...', 
      imagePath: 'lib/logos/reunion.jpg', sousServices: [], url: 'https://cdo-formation.fr/formations-v2.php?activeitem=3'
    ),
  ];

  final List<Map<String, String>> externalLinks = [
    {'title': 'ðŸ“˜ Notre catalogue de formation', 'url': 'https://cdo-formation.fr/formations-liste-v2.php'},
    {'title': 'ðŸ“… Sessions inter-entreprises', 'url': 'https://cdo-formation.fr/sessions-v2.php'},
  ];

  Future<void> openUrl(String url) async {
    final uri = Uri.parse(url);
    if (await canLaunchUrl(uri)) {
      await launchUrl(uri, mode: LaunchMode.externalApplication);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Impossible d\'ouvrir le lien')));
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      body: SingleChildScrollView(
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 30),
        child: Column(
          children: [
            Text('Nos Formations', style: theme.textTheme.headlineLarge),
            const SizedBox(height: 30),
            ...List.generate(services.length, (index) {
              final service = services[index];
              final isExpanded = expandedIndex == index;
              return Card(
                margin: const EdgeInsets.symmetric(vertical: 12),
                clipBehavior: Clip.antiAlias,
                child: InkWell(
                  onTap: () => setState(() => expandedIndex = isExpanded ? null : index),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Image.asset(service.imagePath, height: 180, width: double.infinity, fit: BoxFit.cover),
                      Container(
                        padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 22),
                        color: const Color(0xFF2C3E50), // Dark header for cards
                        child: Text(
                          service.name,
                          style: theme.textTheme.headlineMedium?.copyWith(color: Colors.white, fontSize: 19),
                        ),
                      ),
                      AnimatedCrossFade(
                        firstChild: const SizedBox.shrink(),
                        secondChild: Padding(
                          padding: const EdgeInsets.fromLTRB(22, 20, 22, 30),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(service.description ?? '', style: theme.textTheme.bodyLarge),
                              const SizedBox(height: 28),
                              ElevatedButton.icon(
                                onPressed: () {
                                  if (service.url != null && service.url!.isNotEmpty) openUrl(service.url!);
                                },
                                icon: const Icon(Icons.arrow_forward_ios, size: 16),
                                label: const Text('Voir les formations'),
                              ),
                            ],
                          ),
                        ),
                        crossFadeState: isExpanded ? CrossFadeState.showSecond : CrossFadeState.showFirst,
                        duration: const Duration(milliseconds: 350),
                      ),
                    ],
                  ),
                ),
              );
            }),
            const SizedBox(height: 45),
            Divider(thickness: 1, color: Colors.grey.shade300),
            const SizedBox(height: 25),
            ...externalLinks.map((link) {
              return Card(
                color: theme.primaryColor.withOpacity(0.9),
                margin: const EdgeInsets.symmetric(vertical: 8),
                child: ListTile(
                  title: Text(link['title']!, style: const TextStyle(color: Colors.white, fontWeight: FontWeight.w600, fontSize: 17)),
                  trailing: const Icon(Icons.open_in_new, color: Colors.white),
                  onTap: () => openUrl(link['url']!),
                ),
              );
            }),
            const SizedBox(height: 60),
          ],
        ),
      ),
    );
  }
}